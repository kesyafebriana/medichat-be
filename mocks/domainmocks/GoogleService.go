// Code generated by mockery v2.10.4. DO NOT EDIT.

package domainmocks

import (
	context "context"
	domain "medichat-be/domain"

	mock "github.com/stretchr/testify/mock"
)

// GoogleService is an autogenerated mock type for the GoogleService type
type GoogleService struct {
	mock.Mock
}

// EnsureRegistered provides a mock function with given fields: ctx, profile
func (_m *GoogleService) EnsureRegistered(ctx context.Context, profile domain.GoogleUserProfile) (domain.Account, error) {
	ret := _m.Called(ctx, profile)

	var r0 domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, domain.GoogleUserProfile) domain.Account); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Get(0).(domain.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.GoogleUserProfile) error); ok {
		r1 = rf(ctx, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnsureRegisteredByToken provides a mock function with given fields: ctx, accessToken
func (_m *GoogleService) EnsureRegisteredByToken(ctx context.Context, accessToken string) (domain.Account, error) {
	ret := _m.Called(ctx, accessToken)

	var r0 domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Account); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(domain.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileByAccessToken provides a mock function with given fields: ctx, accessToken
func (_m *GoogleService) GetProfileByAccessToken(ctx context.Context, accessToken string) (domain.GoogleUserProfile, error) {
	ret := _m.Called(ctx, accessToken)

	var r0 domain.GoogleUserProfile
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.GoogleUserProfile); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(domain.GoogleUserProfile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuth2Callback provides a mock function with given fields: ctx, state, opts
func (_m *GoogleService) OAuth2Callback(ctx context.Context, state string, opts domain.OAuth2CallbackOpts) (domain.AuthTokens, error) {
	ret := _m.Called(ctx, state, opts)

	var r0 domain.AuthTokens
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.OAuth2CallbackOpts) domain.AuthTokens); ok {
		r0 = rf(ctx, state, opts)
	} else {
		r0 = ret.Get(0).(domain.AuthTokens)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, domain.OAuth2CallbackOpts) error); ok {
		r1 = rf(ctx, state, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
